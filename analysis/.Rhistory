#   filter(response <= 3)
#
# # >= 4 for political images
# high_pol <- data %>%
#   filter(response >= 4, label != "neutral")
#
# # # <= 3 for political images
# # low_pol <- data %>%
# #   filter(response <= 3, label != "neutral")
#
#
#
#
# # <= 3 for political images
# low_pol <- data %>%
#   filter(label != "neutral") %>%
#   group_by(prolific_id) %>%
#   summarize(all_low = all(response <= 3)) %>%
#   filter(all_low) %>%
#   pull(prolific_id)
#
# # >= 4 for neutral images
# high_neut_4 <- data %>%
#   filter(label == "neutral") %>%
#   group_by(prolific_id) %>%
#   summarize(all_high = all(response >= 4)) %>%
#   filter(all_high) %>%
#   pull(prolific_id)
#
# # <= 3 for pol & >= 4 for neut
# low_pol_high_neut <- data %>%
#   filter(prolific_id %in% intersect(low_pol, high_neut_4)) # none
#
# high_neut_3 <- data %>%
#   filter(label == "neutral") %>%
#   group_by(prolific_id) %>%
#   summarize(all_high = all(response >= 3)) %>%
#   filter(all_high) %>%
#   pull(prolific_id)
#
# low_pol_high_neut_3 <- data %>%
#   filter(prolific_id %in% intersect(low_pol, high_neut_3)) # 1
#
# high_neut_2 <- data %>%
#   filter(label == "neutral") %>%
#   group_by(prolific_id) %>%
#   summarize(all_high = all(response >= 2)) %>%
#   filter(all_high) %>%
#   pull(prolific_id)
#
# low_pol_high_neut_2 <- data %>%
#   filter(prolific_id %in% intersect(low_pol, high_neut_2)) # 4
# create dataframe listing high and low raters for each image
image_ratings_summary <- data %>%
group_by(image_shown) %>%
summarize(
high_raters = paste(unique(prolific_id[response >= 4]), collapse = ", "),
high_ratings = paste(response[response >= 4], collapse = ", "),
low_raters = paste(unique(prolific_id[response < 3]), collapse = ", "),
low_ratings = paste(response[response < 3], collapse = ", ")
# mean_rating = mean(response, na.rm = TRUE),
# high_mean = mean(response[response >= 4], na.rm = TRUE),
# low_mean = mean(response[response < 3], na.rm = TRUE)
)
# merge w/ image_tags
image_tags_with_raters <- image_tags %>%
left_join(image_ratings_summary, by = c("filename" = "image_shown"))
# find users w/ low likelihood of posting political messages, but highest likelihood of posting neutral images
# match prolific_id in high_raters column for neutral images, but low_raters column for political images
# prolific_ids w/ low pol ratings
low_pol <- image_tags_with_raters %>%
filter(label != "neutral") %>%
pull(low_raters) %>%
paste(collapse = ", ") %>%
strsplit(", ") %>%
unlist() %>%
unique()
# prolific_ids w/ high neut ratings
high_neut <- image_tags_with_raters %>%
filter(label == "neutral") %>%
pull(high_raters) %>%
paste(collapse = ", ") %>%
strsplit(", ") %>%
unlist() %>%
unique()
# users who meet both conditions
low_pol_high_neut <- intersect(low_pol, high_neut)
# # create dataframe with all responses from low_pol_high_neut users
# low_pol_high_neut <- data %>%
#   filter(prolific_id %in% low_pol_high_neut)
# prolific_ids w/ high pol
high_pol <- image_tags_with_raters %>%
filter(label != "neutral") %>%
pull(high_raters) %>%
paste(collapse = ", ") %>%
strsplit(", ") %>%
unlist() %>%
unique()
# prolific_ids w/ low neut ratings
low_neut <- image_tags_with_raters %>%
filter(label == "neutral") %>%
pull(high_raters) %>%
paste(collapse = ", ") %>%
strsplit(", ") %>%
unlist() %>%
unique()
# users who meet both conditions
high_pol_low_neut <- intersect(high_pol, low_neut)
neut_image_tags_with_raters <- image_tags_with_raters %>% # 200
filter(label == "neutral")
pol_image_tags_with_raters <- image_tags_with_raters %>% # 400
filter(label != "neutral")
# remove users/rows from neut_image_tags_with_raters who are in high_pol_low_neut
neut_image_tags_with_raters <- neut_image_tags_with_raters %>%
mutate(
# Split strings into lists
temp_raters = strsplit(high_raters, ", "),
temp_ratings = strsplit(high_ratings, ", "),
# Filter out the unwanted IDs and their corresponding ratings
filtered_pairs = mapply(function(raters, ratings) {
keep <- !(raters %in% high_pol_low_neut)
list(
raters = paste(raters[keep], collapse = ", "),
ratings = paste(ratings[keep], collapse = ", ")
)
}, temp_raters, temp_ratings, SIMPLIFY = FALSE),
# Update the columns
high_raters = sapply(filtered_pairs, `[[`, "raters"),
high_ratings = sapply(filtered_pairs, `[[`, "ratings")
) %>%
select(-temp_raters, -temp_ratings, -filtered_pairs)
# calculate means for neutral images
neut_means_by_image <- neut_image_tags_with_raters %>%
mutate(
high_ratings_numeric = lapply(strsplit(high_ratings, ", "), as.numeric),
low_ratings_numeric = lapply(strsplit(low_ratings, ", "), as.numeric),
high_mean = sapply(high_ratings_numeric, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA),
low_mean = sapply(low_ratings_numeric, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA),
all_ratings = Map(c, high_ratings_numeric, low_ratings_numeric),
mean_rating = sapply(all_ratings, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA)
) %>%
select(-high_ratings_numeric, -low_ratings_numeric, -all_ratings)
# remove users/rows from pol_image_tags_with_raters who are in low_pol_high_neut
pol_image_tags_with_raters <- pol_image_tags_with_raters %>%
mutate(
temp_raters = strsplit(high_raters, ", "),
temp_ratings = strsplit(high_ratings, ", "),
filtered_pairs = mapply(function(raters, ratings) {
keep <- !(raters %in% low_pol_high_neut)
list(
raters = paste(raters[keep], collapse = ", "),
ratings = paste(ratings[keep], collapse = ", ")
)
}, temp_raters, temp_ratings, SIMPLIFY = FALSE),
high_raters = sapply(filtered_pairs, `[[`, "raters"),
high_ratings = sapply(filtered_pairs, `[[`, "ratings")
) %>%
select(-temp_raters, -temp_ratings, -filtered_pairs)
# calculate means for political images
pol_means_by_image <- pol_image_tags_with_raters %>%
mutate(
high_ratings_numeric = lapply(strsplit(high_ratings, ", "), as.numeric),
low_ratings_numeric = lapply(strsplit(low_ratings, ", "), as.numeric),
high_mean = sapply(high_ratings_numeric, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA),
low_mean = sapply(low_ratings_numeric, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA),
all_ratings = Map(c, high_ratings_numeric, low_ratings_numeric),
mean_rating = sapply(all_ratings, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA)
) %>%
select(-high_ratings_numeric, -low_ratings_numeric, -all_ratings)
View(neut_means_by_image)
View(pol_means_by_image)
View(image_ratings_summary)
# create dataframe listing high and low raters for each image
image_ratings_summary_2 <- data %>%
group_by(image_shown) %>%
summarize(
highest_raters = paste(unique(prolific_id[response >= 5]), collapse = ", "),
highest_ratings = paste(response[response >= 5], collapse = ", "),
middle_raters = paste(unique(prolific_id[response >= 3 & response < 5]), collapse = ", "),
middle_ratings = paste(response[response >= 3 & response < 5], collapse = ", "),
lowest_raters = paste(unique(prolific_id[response < 3]), collapse = ", "),
lowest_ratings = paste(response[response < 3], collapse = ", ")
# mean_rating = mean(response, na.rm = TRUE),
# high_mean = mean(response[response >= 4], na.rm = TRUE),
# low_mean = mean(response[response < 3], na.rm = TRUE)
)
# merge w/ image_tags
image_tags_with_raters_2 <- image_tags %>%
left_join(image_ratings_summary_2, by = c("filename" = "image_shown"))
View(image_ratings_summary_2)
low_pol_2 <- image_tags_with_raters_2 %>%
filter(label != "neutral") %>%
pull(low_raters) %>%
paste(collapse = ", ") %>%
strsplit(", ") %>%
unlist() %>%
unique()
low_pol_2 <- image_tags_with_raters_2 %>%
filter(label != "neutral") %>%
pull(lowest_raters) %>%
paste(collapse = ", ") %>%
strsplit(", ") %>%
unlist() %>%
unique()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
# read in CSVs from data folder, and combine them into one data frame
data <- list.files(path = "data", pattern = "*.csv", full.names = TRUE)
data <- lapply(data, read.csv)
data <- do.call(rbind, data)
# prolific demographics data
prolific_dem <- read.csv("data/prolific/dem_prolific_export_671a6e9ce2e8c62721d6c06f.csv")
prolific_rep <- read.csv("data/prolific/rep_prolific_export_672a8a0e6efd077ff1e58c49.csv")
# read in image tags
image_tags <- read.csv("../stim_images_v2_covariate_sheet_political.csv")
image_tags$filename <- sub("PNG$", "png", image_tags$filename)
# read in converted json file
participant_assignments <- read.csv("participant_assignments.csv")
# make a new data frame, showing the frequency of each image_shown
image_freq <- data.frame(table(data$image_shown))
# ignore empty rows (") in data$image_shown
image_freq <- image_freq[image_freq$Var1 != "",]
# add image_tags$partisan and image_tags$label to the image_freq data frame by matching on image_shown
image_freq$partisan <- image_tags$partisan[match(image_freq$Var1, image_tags$filename)]
image_freq$label <- image_tags$label[match(image_freq$Var1, image_tags$filename)]
# write.csv(image_freq, "image_freq.csv", row.names = FALSE)
# add image_tags$partisan and image_tags$label to the data data frame by matching on image_shown
data$partisan <- image_tags$partisan[match(data$image_shown, image_tags$filename)]
data$label <- image_tags$label[match(data$image_shown, image_tags$filename)]
# print the column number of each column in data
for (i in 1:ncol(data)) {
print(i)
print(colnames(data)[i])
}
# reorder columns
data <- data[, c(1:5,30,31,32,6:29)]
# write.csv(data, "all_data.csv", row.names = FALSE)
######################
###### CLEANING ######
######################
# print prolific_id in participant_assignments but not in data
participant_assignments$participant_id[!participant_assignments$participant_id %in% data$prolific_id]
# 66864148763565064cf73355 did not complete study but was assigned id 48, not in data
# removed from assignments
# 6643f4b1e70df88c8267ceb30 did not complete study but was assigned id 31, not in data
# removed from assignments
# print unique prolific_id in data
length(unique(data$prolific_id))
data$prolific_id[!data$prolific_id %in% participant_assignments$participant_id]
# answered rep in dem: 65ca7d29af5b6440d955430a, 67214a183205028a0e314764, 6564a38fd32c131677616039, 66bf519b34c66d259e5554d1
# answered dem in rep:
######################
###### CLEANING ######
######################
# form two groups of participants:
# 1. participants who rated all political images (i.e., not neutral) 4 or above
# 2. participants who rated all political images 3 or below
# create dataframe listing high and low raters for each image
image_ratings_summary <- data %>%
group_by(image_shown) %>%
summarize(
high_raters = paste(unique(prolific_id[response >= 4]), collapse = ", "),
high_ratings = paste(response[response >= 4], collapse = ", "),
low_raters = paste(unique(prolific_id[response <= 3]), collapse = ", "),
low_ratings = paste(response[response <= 3], collapse = ", ")
# mean_rating = mean(response, na.rm = TRUE),
# high_mean = mean(response[response >= 4], na.rm = TRUE),
# low_mean = mean(response[response < 3], na.rm = TRUE)
)
# merge w/ image_tags
image_tags_with_raters <- image_tags %>%
left_join(image_ratings_summary, by = c("filename" = "image_shown"))
# find users w/ low likelihood of posting political messages, but highest likelihood of posting neutral images
# match prolific_id in high_raters column for neutral images, but low_raters column for political images
# prolific_ids w/ low pol ratings
low_pol <- image_tags_with_raters %>%
filter(label != "neutral") %>%
pull(low_raters) %>%
paste(collapse = ", ") %>%
strsplit(", ") %>%
unlist() %>%
unique()
# prolific_ids w/ high neut ratings
high_neut <- image_tags_with_raters %>%
filter(label == "neutral") %>%
pull(high_raters) %>%
paste(collapse = ", ") %>%
strsplit(", ") %>%
unlist() %>%
unique()
# users who meet both conditions
low_pol_high_neut <- intersect(low_pol, high_neut)
# prolific_ids w/ high pol
high_pol <- image_tags_with_raters %>%
filter(label != "neutral") %>%
pull(high_raters) %>%
paste(collapse = ", ") %>%
strsplit(", ") %>%
unlist() %>%
unique()
# prolific_ids w/ low neut ratings
low_neut <- image_tags_with_raters %>%
filter(label == "neutral") %>%
pull(high_raters) %>%
paste(collapse = ", ") %>%
strsplit(", ") %>%
unlist() %>%
unique()
# users who meet both conditions
high_pol_low_neut <- intersect(high_pol, low_neut)
neut_image_tags_with_raters <- image_tags_with_raters %>%
filter(label == "neutral")
pol_image_tags_with_raters <- image_tags_with_raters %>%
filter(label != "neutral")
# remove users/rows from neut_image_tags_with_raters who are in high_pol_low_neut
neut_image_tags_with_raters <- neut_image_tags_with_raters %>%
mutate(
# Split strings into lists
temp_raters = strsplit(high_raters, ", "),
temp_ratings = strsplit(high_ratings, ", "),
# Filter out the unwanted IDs and their corresponding ratings
filtered_pairs = mapply(function(raters, ratings) {
keep <- !(raters %in% high_pol_low_neut)
list(
raters = paste(raters[keep], collapse = ", "),
ratings = paste(ratings[keep], collapse = ", ")
)
}, temp_raters, temp_ratings, SIMPLIFY = FALSE),
# Update the columns
high_raters = sapply(filtered_pairs, `[[`, "raters"),
high_ratings = sapply(filtered_pairs, `[[`, "ratings")
) %>%
select(-temp_raters, -temp_ratings, -filtered_pairs)
# calculate means for neutral images
neut_means_by_image <- neut_image_tags_with_raters %>%
mutate(
high_ratings_numeric = lapply(strsplit(high_ratings, ", "), as.numeric),
low_ratings_numeric = lapply(strsplit(low_ratings, ", "), as.numeric),
high_mean = sapply(high_ratings_numeric, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA),
low_mean = sapply(low_ratings_numeric, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA),
all_ratings = Map(c, high_ratings_numeric, low_ratings_numeric),
mean_rating = sapply(all_ratings, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA)
) %>%
select(-high_ratings_numeric, -low_ratings_numeric, -all_ratings)
# remove users/rows from pol_image_tags_with_raters who are in low_pol_high_neut
pol_image_tags_with_raters <- pol_image_tags_with_raters %>%
mutate(
temp_raters = strsplit(high_raters, ", "),
temp_ratings = strsplit(high_ratings, ", "),
filtered_pairs = mapply(function(raters, ratings) {
keep <- !(raters %in% low_pol_high_neut)
list(
raters = paste(raters[keep], collapse = ", "),
ratings = paste(ratings[keep], collapse = ", ")
)
}, temp_raters, temp_ratings, SIMPLIFY = FALSE),
high_raters = sapply(filtered_pairs, `[[`, "raters"),
high_ratings = sapply(filtered_pairs, `[[`, "ratings")
) %>%
select(-temp_raters, -temp_ratings, -filtered_pairs)
# calculate means for political images
pol_means_by_image <- pol_image_tags_with_raters %>%
mutate(
high_ratings_numeric = lapply(strsplit(high_ratings, ", "), as.numeric),
low_ratings_numeric = lapply(strsplit(low_ratings, ", "), as.numeric),
high_mean = sapply(high_ratings_numeric, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA),
low_mean = sapply(low_ratings_numeric, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA),
all_ratings = Map(c, high_ratings_numeric, low_ratings_numeric),
mean_rating = sapply(all_ratings, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA)
) %>%
select(-high_ratings_numeric, -low_ratings_numeric, -all_ratings)
View(participant_assignments)
View(pol_means_by_image)
View(neut_means_by_image)
# create dataframe listing high and low raters for each image
image_ratings_summary_2 <- data %>%
group_by(image_shown) %>%
summarize(
high_raters = paste(unique(prolific_id[response >= 3]), collapse = ", "),
high_ratings = paste(response[response >= 3], collapse = ", "),
low_raters = paste(unique(prolific_id[response <= 2]), collapse = ", "),
low_ratings = paste(response[response <= 2], collapse = ", ")
# mean_rating = mean(response, na.rm = TRUE),
# high_mean = mean(response[response >= 4], na.rm = TRUE),
# low_mean = mean(response[response < 3], na.rm = TRUE)
)
# merge w/ image_tags
image_tags_with_raters_2 <- image_tags %>%
left_join(image_ratings_summary_2, by = c("filename" = "image_shown"))
# find users w/ low likelihood of posting political messages, but highest likelihood of posting neutral images
# match prolific_id in high_raters column for neutral images, but low_raters column for political images
# prolific_ids w/ low pol ratings
low_pol_2 <- image_tags_with_raters_2 %>%
filter(label != "neutral") %>%
pull(low_raters) %>%
paste(collapse = ", ") %>%
strsplit(", ") %>%
unlist() %>%
unique()
# prolific_ids w/ high neut ratings
high_neut_2 <- image_tags_with_raters_2 %>%
filter(label == "neutral") %>%
pull(high_raters) %>%
paste(collapse = ", ") %>%
strsplit(", ") %>%
unlist() %>%
unique()
# users who meet both conditions
low_pol_high_neut_2 <- intersect(low_pol_2, high_neut_2)
# prolific_ids w/ high pol
high_pol_2 <- image_tags_with_raters_2 %>%
filter(label != "neutral") %>%
pull(high_raters) %>%
paste(collapse = ", ") %>%
strsplit(", ") %>%
unlist() %>%
unique()
# prolific_ids w/ low neut ratings
low_neut_2 <- image_tags_with_raters_2 %>%
filter(label == "neutral") %>%
pull(high_raters) %>%
paste(collapse = ", ") %>%
strsplit(", ") %>%
unlist() %>%
unique()
# users who meet both conditions
high_pol_low_neut_2 <- intersect(high_pol_2, low_neut_2)
neut_image_tags_with_raters_2 <- image_tags_with_raters_2 %>%
filter(label == "neutral")
pol_image_tags_with_raters_2 <- image_tags_with_raters_2 %>%
filter(label != "neutral")
# remove users/rows from neut_image_tags_with_raters who are in high_pol_low_neut
neut_image_tags_with_raters_2 <- neut_image_tags_with_raters_2 %>%
mutate(
# Split strings into lists
temp_raters = strsplit(high_raters, ", "),
temp_ratings = strsplit(high_ratings, ", "),
# Filter out the unwanted IDs and their corresponding ratings
filtered_pairs = mapply(function(raters, ratings) {
keep <- !(raters %in% high_pol_low_neut)
list(
raters = paste(raters[keep], collapse = ", "),
ratings = paste(ratings[keep], collapse = ", ")
)
}, temp_raters, temp_ratings, SIMPLIFY = FALSE),
# Update the columns
high_raters = sapply(filtered_pairs, `[[`, "raters"),
high_ratings = sapply(filtered_pairs, `[[`, "ratings")
) %>%
select(-temp_raters, -temp_ratings, -filtered_pairs)
# calculate means for neutral images
neut_means_by_image_2 <- neut_image_tags_with_raters_2 %>%
mutate(
high_ratings_numeric = lapply(strsplit(high_ratings, ", "), as.numeric),
low_ratings_numeric = lapply(strsplit(low_ratings, ", "), as.numeric),
high_mean = sapply(high_ratings_numeric, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA),
low_mean = sapply(low_ratings_numeric, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA),
all_ratings = Map(c, high_ratings_numeric, low_ratings_numeric),
mean_rating = sapply(all_ratings, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA)
) %>%
select(-high_ratings_numeric, -low_ratings_numeric, -all_ratings)
# remove users/rows from pol_image_tags_with_raters who are in low_pol_high_neut
pol_image_tags_with_raters_2 <- pol_image_tags_with_raters_2 %>%
mutate(
temp_raters = strsplit(high_raters, ", "),
temp_ratings = strsplit(high_ratings, ", "),
filtered_pairs = mapply(function(raters, ratings) {
keep <- !(raters %in% low_pol_high_neut)
list(
raters = paste(raters[keep], collapse = ", "),
ratings = paste(ratings[keep], collapse = ", ")
)
}, temp_raters, temp_ratings, SIMPLIFY = FALSE),
high_raters = sapply(filtered_pairs, `[[`, "raters"),
high_ratings = sapply(filtered_pairs, `[[`, "ratings")
) %>%
select(-temp_raters, -temp_ratings, -filtered_pairs)
# calculate means for political images
pol_means_by_image_2 <- pol_image_tags_with_raters_2 %>%
mutate(
high_ratings_numeric = lapply(strsplit(high_ratings, ", "), as.numeric),
low_ratings_numeric = lapply(strsplit(low_ratings, ", "), as.numeric),
high_mean = sapply(high_ratings_numeric, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA),
low_mean = sapply(low_ratings_numeric, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA),
all_ratings = Map(c, high_ratings_numeric, low_ratings_numeric),
mean_rating = sapply(all_ratings, function(x) if(length(x) > 0) mean(x, na.rm = TRUE) else NA)
) %>%
select(-high_ratings_numeric, -low_ratings_numeric, -all_ratings)
View(neut_means_by_image_2)
View(pol_means_by_image_2)
View(neut_image_tags_with_raters)
View(pol_image_tags_with_raters)
View(pol_image_tags_with_raters_2)
View(neut_image_tags_with_raters_2)
# create a list of all of the images in neut_means_by_image and pol_means_by_image where high_mean is not NA
neut_images_rated <- neut_means_by_image %>%
filter(!is.na(high_mean)) %>%
pull(filename)
pol_images_rated <- pol_means_by_image %>%
filter(!is.na(high_mean)) %>%
pull(filename)
neut_images_rated <- neut_means_by_image %>%
filter(!is.na(high_mean))
pol_images_rated <- pol_means_by_image %>%
filter(!is.na(high_mean))
View(neut_images_rated)
View(pol_images_rated)
neut_images_2_rated <- neut_means_by_image_2 %>%
filter(!is.na(high_mean)) # 47
pol_images_2_rated <- pol_means_by_image_2 %>%
filter(!is.na(high_mean)) # 328
